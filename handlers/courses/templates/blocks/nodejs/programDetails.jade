+b.courses-parts.courses-mix
  +e('h2').title Основные темы программы

  +b.tabbed-pane._01

    +e('ul').tabs
      +e('li').tab._01 Первая часть курса
      +e('li').tab._02 Вторая часть курса
      +e('li').tab._03 Третья часть курса

    +e.body._01
      +e('h2').title.phone-only Первая часть курса
      ol
        li
          strong Фундаментальный Node.JS
          p Здесь мы изучим особенности работы Node.JS, его важнейшие модули и приёмы разработки.
          ul
            li Настройка окружения, редактора, инструменты для разработки и отладки.
            li Модули: организация приложения
            li Встроенные модули http, path, fs, events и другие.
            li Жизнь и смерть Node.JS-процесса, важные особенности работы Event Loop в примерах.
            li Потоки в Node.JS, частые ошибки при работе с ними.
        li
          strong Сервер на Node.JS
          p Создадим код и тесты для веб-сервера на Node.JS, а также разберёмся с асинхронностью.
          ul
            li Создание чат-сервера на Node.JS, частые ошибки.
            li Тестирование с использованием mocha и других фреймворков.
        li
          strong Асинхронный код
          p Изучим способы работы с асинхронным кодом, делающие его простым и удобным.
          ul
            li Промисы (promises)
            li Async/Await их особенности в Node.JS.

      p.
        По окончанию первой части курса вы понимаете, как разрабатывать на Node.JS,
        как делать сервер и правильно обрабатывать запросы, автоматически тестировать свой код.

    +e.body._02
      +e('h2').title.phone-only Вторая часть курса
      ol

        li
          strong Современный веб-сервис
          ul
            li Фреймворк Koa.JS: основы, роутинг.
            li Конфигурация через модуль config.
            li Koa.JS: структура middleware, готовые middleware – какие внешние модули для чего использовать.

        li
          strong Работа с базой данных

          p Мы будем использовать MongoDB, однако изучаемые принципы применимы к другим базам, в частности MySQL, PostgreSQL, Redis и т.п.

          ul
            li База MongoDB, её особенности.
            li Объектно-ориентированная работа с MongoDB через Mongoose.
            li Полная картина работы с базой: запросы, схемы, валидация, плагины и middleware.

        li
          strong Авторизация с Passport.JS
          ul
            li Модель пользователя, регистрация.
            li Сессии с Node.JS.
            li Passport.JS: сериализация, стратегии, авторизация.
            li CSRF-защита от взлома для форм и AJAX.

        li
          strong Gulp для запуска задач
          ul
            li Типы задач gulp, написание своих задач.
            li Запуск сервера, загрузка фикстур и тестирование через gulp


        li
          strong COMET при помощи Socket.IO
          ul
            li Вебсокеты.
            li Обмен сообщениями при помощи Socket.IO.
            li Интеграция Socket.IO с Koa.JS, авторизацией и другими сервисами.

        p По окончании этой части мы умеем создавать сервер со страницами, веб-сервисами, авторизацией и чатом.

        p При желании можно дописать к нему новые сервисы и страницы, существующая архитектура позволяет это.

    +e.body._03
      +e('h2').title.phone-only Третья часть курса
      ol
        li
          strong Архитектура проекта

          p В среднем Node.JS-проекте – сотни файлов. Это нормально, и даже вполне удобно, если их правильно организовать.
          ul
            li Архитектура HMVC для Koa.JS.
            li Организация шаблонов, тестов, клиентских скриптов.
        li
          strong Выкладка Production
          ul
            li Организация git-репозитария и модулей.
            li Запуск с кластеризацией на все ядра процессора через PM2.
            li Обзор методов deployment'а.

      p.
        После окончания третьей части вы понимаете,
        как разрабатывается современный Node.JS-проект и
        можете производить такую разработку самостоятельно.

  script.
    var className = 'tabbed-pane', block = document.querySelector('.' + className);

    block.querySelector('.' + className + '__tabs').addEventListener('click', function(e) {
       block.className = className + ' ' + className + '_' +  e.target.className.split('_').pop();
    });



